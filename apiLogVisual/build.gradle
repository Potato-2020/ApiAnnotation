apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'
//https://github.com/bintray/bintray-examples/tree/master/gradle-bintray-plugin-examples
//注意：发布之前，要手动执行other里的install任务，生成pom
group = 'com.potato.apiLog'
version = '1.1.0'

android {
    compileSdkVersion 28
    buildToolsVersion "28.0.3"

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 3
        versionName "1.1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

def siteUrl = 'https://github.com/Potato-2020/apiLog'
def gitUrl = 'https://github.com/Potato-2020/apiLog.git'

bintray {
    user = 'potato-2020'
    key = '******'

    configurations = ['archives'] //When uploading configuration files
    pkg {
        repo = 'apiLog'
        name = 'apiLog'
        desc = 'DebugApiLog'
        websiteUrl = siteUrl
        issueTrackerUrl = 'https://github.com/Potato-2020/apiLog/issues'
        vcsUrl = gitUrl
        licenses = ['Apache-2.0']
        labels = ['aar', 'android']
        publicDownloadNumbers = true
    }
}

install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging 'aar'
                name 'Bintray publish Gradle aar apiLog'
                url siteUrl
                artifactId 'apiLog'
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id 'Potato'
                        name 'Potato Wang'
                        email 'w15201163153@sina.com'
                    }
                }
                scm {
                    connection 'https://github.com/Potato-2020/apiLog.git'
                    developerConnection 'https://github.com/Potato-2020/apiLog.git'
                    url siteUrl

                }
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.1'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    //room数据库
    implementation 'android.arch.persistence.room:runtime:1.1.1'
    kapt 'android.arch.persistence.room:compiler:1.1.1'

    //rxjava
    implementation 'io.reactivex.rxjava2:rxjava:2.2.2'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.0'

    //ok
    implementation 'com.squareup.okhttp3:okhttp:3.14.4'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.0.0-alpha02'
    //gson
    implementation 'com.google.code.gson:gson:2.8.0'

    //recyclerview适配器
    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.46'

    //recyclerview
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier 'sources'
}

task javadoc(type: Javadoc) {
    options.encoding = 'UTF-8'
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}